import wollok.game.*
import level.*
import tiles.*
import gameAssets.*

describe "tests para maps y niveles" {

	test "el mapa tiene un tamaño de 10 x 10 con una posición de inicio y una de fin" {
		var map = new Map(10,10)
		map.startPosition(3,3)
		map.endPoint(5,5)
		
		assert.equals(map.boardSize().x() , 10)
		assert.equals(map.boardSize().y() , 10)
		assert.equals(map.startPosition() , new Position(3,3))
		assert.equals(map.endPoint().position() , new Position(5,5))
		assert.that(map.carrots().isEmpty())
		assert.that(map.elements().isEmpty())
	}

	test "el mapa tiene 3 zanahorias" {
		var map = new Map(10,10)
		map.addCarrot(6,7)
		map.addCarrot(7,8)
		map.addCarrot(8,9)
		
		assert.equals(map.carrots().size(), 3)	
	}

	test "el mapa tiene 3 paredes" {
		var map = new Map(10,10)
		map.addObstacle(new Obstacle(new Position(6,7), assets.get("horizontalFence")))
		map.addObstacle(new Obstacle(new Position(7,8), assets.get("horizontalFence")))
		map.addObstacle(new Obstacle(new Position(8,9), assets.get("horizontalFence")))
		
		assert.equals(map.elements().size(), 3)	
	}

	test "el nivel N se construye en base a cierto mapa sin zanahorias" {
		var map = new Map(10,10)
		var level = new Level(1,map)
		assert.equals(level.initialCarrotsAmount(), 0)
		assert.equals(level.collectedCarrotsAmount(), 0)
		assert.equals(level.player(), level.bunny())
	}

	test "el nivel N se construye en base a un mapa con 1 zanahoria" {
		var map = new Map(10,10)
		map.addCarrot(6,7)
		var level = new Level(1,map)
		assert.equals(level.initialCarrotsAmount(), 1)
		assert.equals(level.collectedCarrotsAmount(), 0)
	}
	
	test "lista de niveles" {
		assert.notThat(levelsList.levelTwo() == null)
	}

	test "el nivel 2 le sigue al nivel 1, y el nivel 3 le sigue al nivel 2" {
		var levelOne = levelsList.level(1)
		var levelTwo = levelsList.level(2)
		var levelThree = levelsList.level(3)
		
		assert.equals(levelOne.nextLevel(), levelTwo)
		assert.equals(levelTwo.nextLevel(), levelThree)
	}
	
	test "map builder full" {
		var mapDefinition = []
		mapDefinition.add("G")
		
		mapDefinition.first().words().size()
		
		assert.that(mapDefinition.first() == "G")
		assert.that(mapDefinition.first().words() == ["G"])
		
		// var map = mapBuilder.buildMapFromMatrix(mapDefinition)
		// assert.notThat(map == null)
	}

}
